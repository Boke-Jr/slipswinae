"""
This file tests 2 different config files other than slips' default config/slips.yaml
test/test.yaml and tests/test2.yaml
"""
import re
import shutil
from pathlib import PosixPath

import redis

from tests.common_test_utils import (
    create_output_dir,
    assert_no_errors,
)
from tests.module_factory import ModuleFactory
import pytest
import os
import subprocess
import time
import sys
from unittest.mock import Mock

alerts_file = "alerts.log"

def countdown(seconds, message):
    """
    counts down from the given number of seconds, printing a message each second.
    """
    while seconds > 0:
        sys.stdout.write(
            f"\rSending {message} in {seconds} "
        )  # overwrite the line
        sys.stdout.flush()  # ensures immediate output
        time.sleep(1)  # waits for 1 second
        seconds -= 1
    sys.stdout.write(f"\rSending {message} now!          \n")


def message_send(port, channel, message):
    # connect to redis database 0
    redis_client = redis.StrictRedis(host="localhost", port=port, db=0)

    # publish the message to the "network2fides" channel
    redis_client.publish(channel, message)

    print(f"Test message published to channel '{channel}'.")


message_alert_TL_NL = """{
    "type": "tl2nl_alert",
    "version": 1,
    "data": {
      "payload": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    }
}"""


message_alert_NL_S = """{
    "type": "nl2tl_alert",
    "version": 1,
    "data": 
        "sender": "<Metadata of peer who's alerting>"
        "payload": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
}"""


def check_strings_in_file(string_list, file_path):
    # Check if the file exists
    if not os.path.exists(file_path):
        print(f"File {file_path} does not exist.")
        return False

    # Open the file and read its content
    try:
        with open(file_path, 'r') as file:
            file_content = file.read()

        # Check if all strings in the list are present in the file content
        for string in string_list:
            if string not in file_content:
                return False
        return True

    except Exception as e:
        print(f"Error reading file: {e}")
        return False

def prepare_configuration(cleanup=False):
    log_file = "output/integration_tests/iris_create/iris_log.txt"
    config_file = "tests/integration_tests/config/iris_peer_config.yaml"
    backup_file = config_file + ".bak"

    if not cleanup:
        # Read and extract the connection string
        with open(log_file, "r") as log:
            for line in log:
                match = re.search(r"connection string:\s+'(.+)'", line)
                if match:
                    original_conn_string = match.group(1)
                    break
            else:
                print("No connection string found in log file.")
                exit(1)

        # Replace with the new connection string
        original_conn_string = re.sub(r"/udp/9002/", "/udp/9010/", original_conn_string)
        new_conn_string = "    - " + original_conn_string

        # Backup the original config file
        shutil.copy(config_file, backup_file)

        # Append the new connection string
        with open(config_file, "a") as config:
            config.write("\n" + new_conn_string + "\n")

        shutil.move("keyfile.priv","modules/irisModule/keyfile.priv")

    else:
        shutil.move(backup_file, config_file)
        os.remove("modules/irisModule/keyfile.priv")


@pytest.mark.parametrize(
    "path, output_dir, peer_output_dir, redis_port, peer_redis_port",
    [
        (
            "dataset/test13-malicious-dhcpscan-zeek-dir",
            "iris_integration_test/",
            "peer_iris_integration_test/",
            6644,
            6655,
        )
    ],
)
def test_messaging_1(path, output_dir, peer_output_dir, redis_port, peer_redis_port):
    """
    Tests whether Iris properly distributes an alert message generated by Slips to the network (~other peers).
    First Slips instance acts as a bootstrapping node, its connection string is set, and the second instance of Slips acts
    as a normal-user-peer that joins the network using the aforementioned Slips instance.
    """
    output_dir: PosixPath = create_output_dir(output_dir)
    output_file = os.path.join(output_dir, "slips_output.txt")

    output_dir_peer: PosixPath = create_output_dir(peer_output_dir)
    output_file_peer = os.path.join(output_dir_peer, "slips_output.txt")

    output_dir_create: PosixPath = create_output_dir("iris_create")
    output_file_create = os.path.join(output_dir_create, "iris_log.txt")

    iris_log_entries = ["INFO	iris	protocols/alert.go:111	received p2p alert message"]
    command = [
        "./slips.py",
        "-t",
        "-g",
        "-e",
        "1",
        "-f",
        str(path),
        "-o",
        str(output_dir),
        "-c",
        "tests/integration_tests/fides_config.yaml",
        "-P",
        str(redis_port),
    ]

    peer_command = [
        "./slips.py",
        "-t",
        "-g",
        "-e",
        "1",
        "-f",
        str(path),
        "-o",
        str(output_dir_peer),
        "-c",
        "tests/integration_tests/iris_config.yaml",
        "-P",
        str(peer_redis_port),
    ]

    print("running slips ...")
    #print(output_dir)

    # Define the executable and config file paths for iris key creator
    executable_path = os.path.join(".", "modules", "irisModule", "peercli")
    config_path = os.path.join("tests", "integration_tests", "config", "iris_creator_config.yaml")
    executable_path = os.path.abspath(executable_path)
    config_path = os.path.abspath(config_path)
    command_creator = [str(executable_path), "--conf", str(config_path)]

    with open(output_file_create, "w") as log_file:
        redis_process = subprocess.Popen(["redis-server", "--port", "6633"])
        countdown(5, "iris creator")
        creator = subprocess.Popen(command_creator, stdout=log_file, stderr=log_file)
        countdown(15, "sigterm")
        # send a SIGTERM to the process
        redis_process.terminate()
        os.kill(creator.pid, 15)
        print("SIGTERM sent. killing iris\' creator")
        redis_process.kill()
        os.kill(creator.pid, 9)

    prepare_configuration()

    try:
        # Open the log file in write mode
        with open(output_file, "w") as log_file:
            with open(output_file_peer, "w") as iris_log_file:
                # Start the subprocess, redirecting stdout and stderr to the same file
                process = subprocess.Popen(
                    command,  # Replace with your command
                    stdout=log_file,
                    stderr=log_file,
                )

                countdown(20, "second peer")

                Pprocess = subprocess.Popen(peer_command, stdout=iris_log_file, stderr=iris_log_file)

                print(f"Output and errors are logged in {output_file}")
                countdown(80, "sigterm")
                message_send(redis_port, message=message_alert_TL_NL, channel="fides2network",)
                # these seconds are the time we give slips to process the msg
                countdown(30, "sigterm")
                # send a SIGTERM to the process
                os.kill(process.pid, 15)
                os.kill(Pprocess.pid, 15)
                print("SIGTERM sent. killing slips + iris")
                os.kill(process.pid, 9)
                os.kill(Pprocess.pid, 9)

        print(f"Slips with PID {process.pid} was killed.")
        print(f"Slips peer with PID {Pprocess.pid} was killed.")

        print("Slip is done, checking for errors in the output dir.")
        assert_no_errors(output_dir)
        assert_no_errors(output_dir_peer)
        assert check_strings_in_file(iris_log_entries, "output/iris_peer/iris_logs.txt")
        print("Checking")

        print("Deleting the output directory")
        # shutil.rmtree(output_dir)
        # shutil.rmtree(output_dir_peer)
    finally:
        prepare_configuration(cleanup=True)